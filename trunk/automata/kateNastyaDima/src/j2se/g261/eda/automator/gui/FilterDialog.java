/*
 * FilterDialog.java
 *
 * Created on 24 Ноябрь 2008 г., 3:45
 */
package j2se.g261.eda.automator.gui;

import j2se.g261.eda.automator.tests.ItemFilter;
import j2se.g261.eda.automator.tests.filters.ResultMatchingFilter;
import j2se.g261.eda.automator.tests.filters.ResultPatternFilter;
import j2se.g261.eda.automator.tests.filters.TimeCompareFilter;
import j2se.g261.eda.automator.tests.filters.TimeResultTypeObject;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JRadioButton;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author  nastya
 */
public class FilterDialog extends javax.swing.JDialog implements ActionListener, ListSelectionListener {

    private static final String MORE = ">";
    private static final String MORE_OR_EQUALS = ">=";
    private static final String EQUALS = "==";
    private static final String NOT_EQUALS = "<>";
    StatisticTable table;
    private JRadioButton lastSelectedRadioButton = null;
    private JLabel lbShowed;

    /** Creates new form FilterDialog */
    public FilterDialog(java.awt.Frame parent, boolean modal, StatisticTable table, JLabel lbShowed) {
        super(parent, modal);
        this.table = table;
        this.lbShowed = lbShowed;
        initComponents();
        Toolkit toolkit = Toolkit.getDefaultToolkit();
        Dimension screenSize = toolkit.getScreenSize();
        int x = (screenSize.width - getWidth()) / 2;
        int y = (screenSize.height - getHeight()) / 2;
        setLocation(x, y);
        cbFirst.addItem(TimeResultTypeObject.RESULT_NFA);
        cbFirst.addItem(TimeResultTypeObject.RESULT_DFA);
        cbFirst.addItem(TimeResultTypeObject.RESULT_MIN_DFA);
        cbFirst.addItem(TimeResultTypeObject.RESULT_TABLE);
        cbSecond.addItem(TimeResultTypeObject.RESULT_NFA);
        cbSecond.addItem(TimeResultTypeObject.RESULT_DFA);
        cbSecond.addItem(TimeResultTypeObject.RESULT_MIN_DFA);
        cbSecond.addItem(TimeResultTypeObject.RESULT_TABLE);
        cbSign.addItem(MORE);
        cbSign.addItem(MORE_OR_EQUALS);
        cbSign.addItem(EQUALS);
        cbSign.addItem(NOT_EQUALS);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        rbFilterByPattern.addActionListener(this);
        rbFilterByResults.addActionListener(this);
        rbFilterByTime.addActionListener(this);
        rbFilterNone.addActionListener(this);
        rbAllOk.addActionListener(this);
        rbHaveWrong.addActionListener(this);
        patternList.addListSelectionListener(this);
        cbFirst.addActionListener(this);
        cbSecond.addActionListener(this);
        cbSign.addActionListener(this);
        switchFilters(rbFilterByPattern, false);
        switchFilters(rbFilterByResults, false);
        switchFilters(rbFilterByTime, false);
        switchFilters(rbFilterNone, true);
        lastSelectedRadioButton = rbFilterNone;
    }

    public void updateShowLabel() {
        lbShowed.setText("Show " + table.getData().size() + " from " + table.getData().allSize());
        lbShowed.updateUI();
    }

    private void switchFilters(JRadioButton rb, boolean enable) {
        if (rb == rbFilterByPattern) {
            lbChoose.setEnabled(enable);
            patternList.setEnabled(enable);
        } else if (rb == rbFilterByResults) {
            rbAllOk.setEnabled(enable);
            rbHaveWrong.setEnabled(enable);
        } else if (rb == rbFilterByTime) {
            cbFirst.setEnabled(enable);
            cbSecond.setEnabled(enable);
            cbSign.setEnabled(enable);
        }
    }

    public void valueChanged(ListSelectionEvent e) {
        if (e.getSource().equals(patternList)) {
            table.setFilter(createPatternFilter());
            updateShowLabel();
        }
    }

    private ItemFilter createPatternFilter() {
        if (patternList.getSelectedValue() != null) {
            return new ResultPatternFilter(String.valueOf(patternList.getSelectedValue()));
        }
        return null;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel3 = new javax.swing.JPanel();
        rbFilterByResults = new javax.swing.JRadioButton();
        rbAllOk = new javax.swing.JRadioButton();
        rbHaveWrong = new javax.swing.JRadioButton();
        rbFilterByTime = new javax.swing.JRadioButton();
        cbFirst = new javax.swing.JComboBox();
        cbSign = new javax.swing.JComboBox();
        cbSecond = new javax.swing.JComboBox();
        rbFilterByPattern = new javax.swing.JRadioButton();
        lbChoose = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        patternList = new javax.swing.JList();
        rbFilterNone = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Filter", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        buttonGroup1.add(rbFilterByResults);
        rbFilterByResults.setText("By results");

        buttonGroup2.add(rbAllOk);
        rbAllOk.setText("All ok");
        rbAllOk.setEnabled(false);

        buttonGroup2.add(rbHaveWrong);
        rbHaveWrong.setSelected(true);
        rbHaveWrong.setText("Have wrong result");
        rbHaveWrong.setEnabled(false);

        buttonGroup1.add(rbFilterByTime);
        rbFilterByTime.setText("By time");

        cbFirst.setModel(new DefaultComboBoxModel());
        cbFirst.setEnabled(false);

        cbSign.setEnabled(false);

        cbSecond.setEnabled(false);

        buttonGroup1.add(rbFilterByPattern);
        rbFilterByPattern.setText("By pattern");

        lbChoose.setText("Choose one:");
        lbChoose.setEnabled(false);

        patternList.setModel(new DefaultListModel());
        patternList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        patternList.setEnabled(false);
        jScrollPane3.setViewportView(patternList);

        buttonGroup1.add(rbFilterNone);
        rbFilterNone.setSelected(true);
        rbFilterNone.setText("None");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbFilterNone)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(cbFirst, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbSign, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbSecond, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(rbFilterByResults)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rbHaveWrong)
                            .addComponent(rbAllOk)))
                    .addComponent(rbFilterByTime))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addComponent(lbChoose, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(rbFilterByPattern)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(14, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbFilterByPattern)
                    .addComponent(rbFilterNone))
                .addGap(8, 8, 8)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbFilterByResults)
                    .addComponent(lbChoose))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(rbAllOk)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rbHaveWrong)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rbFilterByTime)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbFirst, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbSign, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbSecond, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(62, 62, 62))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        getContentPane().add(jPanel3, new java.awt.GridBagConstraints());

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        java.awt.EventQueue.invokeLater(new Runnable() {
//
//            public void run() {
//                FilterDialog dialog = new FilterDialog(new javax.swing.JFrame(), true);
//                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
//
//                    public void windowClosing(java.awt.event.WindowEvent e) {
//                        System.exit(0);
//                    }
//                });
//                dialog.setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JComboBox cbFirst;
    private javax.swing.JComboBox cbSecond;
    private javax.swing.JComboBox cbSign;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lbChoose;
    javax.swing.JList patternList;
    private javax.swing.JRadioButton rbAllOk;
    private javax.swing.JRadioButton rbFilterByPattern;
    private javax.swing.JRadioButton rbFilterByResults;
    private javax.swing.JRadioButton rbFilterByTime;
    javax.swing.JRadioButton rbFilterNone;
    private javax.swing.JRadioButton rbHaveWrong;
    // End of variables declaration//GEN-END:variables

    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JRadioButton) {
            if (!(e.getSource() == rbAllOk || e.getSource() == rbHaveWrong)) {
                switchFilters(lastSelectedRadioButton, false);
                switchFilters((JRadioButton) e.getSource(), true);
                lastSelectedRadioButton = (JRadioButton) e.getSource();
            }

            table.setFilter(createFilter((JRadioButton) e.getSource()));
            updateShowLabel();
            table.updateTableUI();
        }
        if (e.getSource() instanceof JComboBox) {
            table.setFilter(createCompareFilter());
            updateShowLabel();
        }
    }

    private ItemFilter createCompareFilter() {
        if (cbFirst.getSelectedItem() == cbSecond.getSelectedItem()) {
            return null;
        }
        TimeCompareFilter.CompareType type;
        if (cbSign.getSelectedItem().equals(MORE)) {
            type = TimeCompareFilter.CompareType.MORE;
        } else if (cbSign.getSelectedItem().equals(MORE_OR_EQUALS)) {
            type = TimeCompareFilter.CompareType.MORE_AND_EQUALS;
        } else if (cbSign.getSelectedItem().equals(EQUALS)) {
            type = TimeCompareFilter.CompareType.EQUALS;
        } else {
            type = TimeCompareFilter.CompareType.NOT_EQUALS;
        }
        return new TimeCompareFilter(
                (TimeResultTypeObject) cbFirst.getSelectedItem(),
                type, (TimeResultTypeObject) cbSecond.getSelectedItem());
    }

    private ItemFilter createFilter(JRadioButton rb) {
        ItemFilter result = null;
        if (rb == rbFilterByResults) {
            if (rbAllOk.isSelected()) {
                result = new ResultMatchingFilter(true);
            } else {
                result = new ResultMatchingFilter(false);
            }
        } else if (rb == rbFilterByPattern) {
            result = createPatternFilter();
        } else if (rb == rbFilterByTime) {
            result = createCompareFilter();
        } else if (rb == rbAllOk) {
            result = new ResultMatchingFilter(true);
        } else if (rb == rbHaveWrong) {
            result = new ResultMatchingFilter(false);
        }
        return result;
    }
}
