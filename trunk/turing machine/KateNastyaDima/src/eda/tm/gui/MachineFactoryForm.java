/*
 * MachineFactoryForm.java
 *
 * Created on 14 Декабрь 2008 г., 15:33
 */
package eda.tm.gui;

import eda.tm.Programm;
import eda.tm.Tape;
import eda.tm.Trace;
import eda.tm.TraceItem;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;

import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.border.EmptyBorder;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;

/**
 *
 * @author  nastya
 */
public class MachineFactoryForm extends javax.swing.JPanel implements ActionListener {

    Programm program = null;

    /** Creates new form MachineFactoryForm */
    public MachineFactoryForm() {
        initComponents();
        btnCreate.addActionListener(this);
        btnExecute.addActionListener(this);
        btnLoad.addActionListener(this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        btnLoad = new javax.swing.JButton();
        btnCreate = new javax.swing.JButton();
        tfTape = new javax.swing.JTextField();
        btnExecute = new javax.swing.JButton();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.MatteBorder(null), "Trace"));

        table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        table.setAutoCreateColumnsFromModel(false);
        table.setModel(new TraceTableModel(new Trace()));
        for (int idx = 0; idx < ((TraceTableModel) table.getModel()).columns.length; idx++) {
            TableCellRenderer renderer = new TraceTableRenderer();
            TableColumn column = new TableColumn(idx,
                20, renderer, null);
            table.addColumn(column);
        }
        jScrollPane2.setViewportView(table);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 681, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 367, Short.MAX_VALUE)
                .addContainerGap())
        );

        btnLoad.setText("Load Code");

        btnCreate.setText("Create Code");

        btnExecute.setText("Execute");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnLoad)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCreate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tfTape, javax.swing.GroupLayout.DEFAULT_SIZE, 394, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnExecute)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLoad)
                    .addComponent(btnCreate)
                    .addComponent(btnExecute)
                    .addComponent(tfTape, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnExecute;
    private javax.swing.JButton btnLoad;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable table;
    private javax.swing.JTextField tfTape;
    // End of variables declaration//GEN-END:variables

    public void actionPerformed(ActionEvent e) {
        if (e.getSource().equals(btnCreate)) {
        }
        if (e.getSource().equals(btnLoad)) {
            JFileChooser fc = new JFileChooser();
            fc.setMultiSelectionEnabled(false);
            if (fc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
                program = Programm.parseProgram(fc.getSelectedFile());
            }

        }
        if (e.getSource().equals(btnExecute)) {
            if (program == null) {
                JOptionPane.showMessageDialog(this, "Please load program code", "Attention!", JOptionPane.ERROR_MESSAGE);
                return;
            } else {
            	Trace trace = null;
//                trace = program.execute(new Tape(Programm.translateToVector(tfTape.getText())));
                trace = program.execute(new Tape(Programm.translateToVector(Programm.parseProgram(new File("W:\\261studentprojects\\turing machine\\KateNastyaDima\\programs\\unary_mod.xml") ).toUTMString() + "c" + tfTape.getText().trim())));
                System.out.println(trace);
//                for (int i = 0; i < table.getColumnCount(); i++) {
//                    table.removeColumn(table.getColumnModel().getColumn(i));
//                }
//                TraceTableModel model = new TraceTableModel(trace);
//                table.setModel(model);
//                for (int idx = 0; idx < ((TraceTableModel) model).columns.length; idx++) {
//                    TableCellRenderer renderer = new TraceTableRenderer();
//                    TableColumn column = new TableColumn(idx,
//                            40, renderer, null);
//                    column.setCellRenderer(new TraceTableRenderer());
//                    table.addColumn(column);
//                }
//                table.updateUI();
            }
        }
    }
}

class TraceTableRenderer extends JLabel implements TableCellRenderer {
    private static final String CURRENT = "./icons/current.gif";
    private static final String LAST = "./icons/last.gif";

    public TraceTableRenderer() {
        super();
        setOpaque(true);
        setBorder(new EmptyBorder(1, 2, 1, 2));
    }

    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
        if (value != null && value instanceof TraceItem) {
            TraceItem item = (TraceItem) value;
            setText(String.valueOf(item.getSymbol()));

            if (row == table.getRowCount() - 1) {
                setBackground(Color.RED);
            } else {
                if (item.isCurrentPoint()) {
                    setBackground(Color.GREEN);
               } else if (item.isLastPoint()) {
                    setBackground(Color.BLUE);
                }else{
                	setBackground(Color.WHITE);
                }
            }
        }else{
        	setBackground(Color.WHITE);
        }
        return this;
    }
}


